name: Unit Testing (Container)
on:
  push:
    branches:
      - development
      - production
jobs:
  frontendtest:
    runs-on: ubuntu-22.04
    steps:
      - name: Get Code
        uses: actions/checkout@v4
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-
      - name: Install Dependencies
        run: npm ci --ignore-scripts
        working-directory: ./frontend
      - name: Lint code
        run: npm run lint
        working-directory: ./frontend
      - name: Run Unit Tests
        run: npm run test
        working-directory: ./frontend
  backendtest:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:13.3
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: amitbera
          POSTGRES_DB: development
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Get Code
        uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        id: cache-poetry
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Install Poetry dependencies
        run: poetry install
        working-directory: ./backend
      - name: Run Unit Tests and setup secrets env
        run: poetry run pytest
        env:
          CONTENT_EXPIRE: ${{ secrets.CONTENT_EXPIRE }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_ALGORITHM: ${{ secrets.JWT_ALGORITHM }}
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
          JWT_REFRESH_TOKEN_EXPIRE_MINUTES: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRE_MINUTES }}
          JWT_AUTH_TOKEN: ${{ secrets.JWT_AUTH_TOKEN }}
          ENV: "development"
          TNSR_DOMAIN: "http://localhost:3000"
        working-directory: ./backend
